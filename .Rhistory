HTML<-htmlTreeParse(url,useInternalNodes=F)
HTML[10,]
htmcode
htmcode[10,]
htmcode[,10]
type(htmlcode)
htmcode[10]
nchar(htmcode[10])
nchar(htmcode[20])
nchar(htmcode[30])
nchar(htmcode[1000])
nchar(htmcode[100])
read.table(D:\\My Documents\\Downloadsgetdata_wksst8110.for)
read.table("D:\\My Documents\\Downloadsgetdata_wksst8110.for")
read.table("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
QFive<-read.table("D:\\My Documents\\Downloads\\getdata_wksst8110.for",fill = F)
read.for("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
??read.for
read.f("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",widths=8)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",widths=8)
View(Qfive)
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=100)
View(Qfive)
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=100)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
install.packages("descr")
View(Qfive)
View(Qfive)
View(Qfive)
fwf2csv(Qfive,"./Qfive.csv")
??fwf2csv
lib(descr)
library(descr)
fwf2csv(Qfive,"./Qfive.csv")
fwf2csv(Qfive,"./Qfive.csv",c("week","nino1+2","nino3"."nino34","nino4"))
fwf2csv(Qfive,"./Qfive.csv",1,)
fwf2csv(Qfive,"./Qfive.csv",3,5,1000)
fwf2csv("D:\\My Documents\\Downloads\\getdata_wksst8110.for","./Qfive.csv",3,5,1000)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(9,8,8,8,8))
View(Qfive)
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,10,10,10,10))
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,13,13,13,13))
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,9,4,9,4,9,4,9,4))
View(Qfive)
sum<-Qfive[5:1000,2]
sum
sum<-Qfive[5:1000,4]
number<sum(sum)
number<-sum(sum)
sum
sum<-Qfive[5:1000,4]
apply(sum,2,mean)
mode(sum)
sum(sum)
sum<-as.vector(sum)
sum(sum)
sum<-as.numeric(sum)
sum(sum)
sum<-Qfive[5:1000,8]
sum<-as.numeric(sum)
sum(sum)
sumTA<-Qfive[5:1000,9]
sumTA<-as.numeric(sumTA)
sum(sum)+sum(sumTA)
sumTA<-Qfive[5:1000,7]
sum<-Qfive[5:1000,6]
sumTA<-as.numeric(sumTA)
sum<-as.numeric(sum)
sum(sum)+sum(sumTA)
sum(sum)
sum<-Qfive[5:1000,4]
sum<-as.numeric(sum)
sum(sum)
sum<-as.numeric(as.vector(Qfive[5:1000,6]))
sum(sum)
sumTA<-as.numeric(as.vector(Qfive[5:1000,7]))
sum(sum)+sum(sumTA)
sum<-as.numeric(as.vector(Qfive[5:1000,4]))
sum(sum)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,9,4,9,4,9,4,9,4))
View(Qfive)
View(Qfive)
library(nlme)
library(lattice)
a<-xyplot(weight ~ Time | Diet, BodyWeight)
print(a)
inatall.packages(c("knitr","markdown"))
inatall.Packages(c("knitr","markdown"))
install.packages(c("knitr","markdown"))
n=9;mean=1100;s=30
mean+c(-1.1)*qt(0.975,n-1)*s/sqrt(9)
mean+c(-1,1)*qt(0.975,n-1)*s/sqrt(9)
qt(0.9758)
qt(0.975,8)
n1=n2=10;sd1=0.6;sd2=0.68;m1=3;m2=5
sp=sqrt((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2)
md=m1-m2
md+c(-1,1)*qt(0.975,n1+n2-2)*sp*sqrt(1/n1+1/n2)
sp=sqrt((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2))
sp=sqrt(((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2))
md+c(-1,1)*qt(0.975,n1+n2-2)*sp*sqrt(1/n1+1/n2)
if (!file.exists("stormData.csv.bz2")){
setInternet2(use = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "stormData.csv.bz2")
}
df= read.csv(bzfile("stormData.csv.bz2"))
rawStorm = read.csv(bzfile("StormData.csv.bz2), as.is = TRUE, header = TRUE)
rawStorm = read.csv(bzfile("StormData.csv.bz2"), as.is = TRUE, header = TRUE)
rawStorm = read.csv(bzfile("StormData.csv.bz2"), as.is = TRUE, header = TRUE)
a0<-c(8,3,-1,2,5)
mean(a0)
std(a0)
st(a0)
var(a0)
pt(mean(a0),var(a0),lower.tail=failse)
pt(mean(a0),var(a0),lower.tail=false)
pt(mean(a0),var(a0),lower.tail=0)
pbinom(mean(a0),var(a0),lower.tail=0)
pbinom(2,size=4,prob=0.5,lower.tail=0)
pbinom(3,size=4,prob=0.5,lower.tail=0)
pbinom(4,size=4,prob=0.5,lower.tail=0)
ppois(17.87,10,lower.tail=0)
ppois(17,10,lower.tail=0)
ppois(16,10,lower.tail=0)
pbinom(0.01,0.04,lower.tail=1)
pbinom(0.01,0.04,lower.tail=T)
pbinom(0.01,0.04,lower.tail=0)
pt(0.01,0.04,lower.tail=1)
power.t.test(n=150,delta=0.01,sa=0.04,type="one.sample",alt="one.sided")$power
power.t.test(n=150,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$power
power.t.test(n=180,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$power
power.t.test(n=160,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$power
library(manipulate)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
myhist<-function(mu){}
myhist<-function(mu){
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(-2,1,step=0.05))
myhist<-function(mu){
hist(x,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2)))
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
myhist<-function(mu){
hist(x,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2))
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(-2,1,step=0.05))
myhist<-function(mu){
hist(x,w,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2))
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(-2,1,step=0.05))
myhist<-function(mu){
hist(x,frequency=w,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2))
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
myhist<-function(mu){
hist(x,freq=w,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2))
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(-2,1,step=0.05))
??hist
myhist<-function(mu){
hist(x~w,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2))
mse<-w*((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(-2,1,step=0.05))
myhist<-function(mu){
x=(0.18,0.18,-1.54,0.42,0.42,0.95)
hist(x,col="blue",breaks=100)
lines(c(mu,mu),c(-1,2))
mse<-((x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,150,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(-2,1,step=0.05))
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean(galton$child-mu)^2)
myhist<-function(mu){
+ library(UsingR);data(galton)
+ hist(galton$child,col="blue",breaks=100)
+ lines(c(mu,mu),c(0,150),col="red",lwd=5)
+ mse<-mean((galton$child-mu)^2)
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
}
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(64,72,step=0.5))
install.packages("UsingR")
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(64,72,step=0.5))
manipulate(myhist(mu),mu=slider(64,72,step=0.5))
manipulate(myhist(mu),mu=slider(64,72, step=0.5))
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(64,72, step=0.5))
manipulate(myhist(mu),mu=slider(64,72))
manipulate(myhist(mu),mu=slider(64,72, sep=0.5))
manipulate(myhist(mu),mu=slider(64,72, step=0.5))
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(64,72, step=0.5))
??slider
manipulate(myhist(mu),mu=slider(64,72, step=0.2))
manipulate(myhist(mu),mu=slider(64,72, step<-0.2))
barplot(1:x),
x = slider(5, 25, step = 5))
barplot(1:x),
x = slider(5, 25, step = 5)
manipulate(plot(1:x), x = slider(5, 10))
manipulate(plot(1:x), x = slider(5, 10))
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myhist(mu),mu=slider(64,72, step<-0.2))
myhist<-function(mu){
library(UsingR);data(galton)
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(UsingR); data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
library(UsingR); data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
manipulate(myHist(mu), mu = slider(62, 74))
??manipulate()
manipulate(plot(1:x), x = slider(5, 10))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74))
library(manipulate)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74,step=0.5))
install.packages("caret")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62);y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)$sigma
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62);y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)$p
??summary()
summary(fit)$coefficients
data(mtcars)
library(UsingR); data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$weight)
View(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
??mtcars
newx <-3000
coef(fit)[1] + coef(fit)[2] * newx
newy<-3000
newx<-3
coef(fit)[1] + coef(fit)[2] * newx
newx<-2
coef(fit)[2] * newx
fit2 <- lm(mtcars$mpg ~ I(mtcars$wt - mean(mtcars$wt)), data = mtcars)
sumCoef <- summary(fit2)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef <- summary(fit2)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
newx<-mean(mtcars$wt)
coef(fit)[1] + coef(fit)[2] * newx
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
y<-mtcars$wt;x<-mtcars$wt
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
data(mtcars)
library(datasets)
library(datasets)
fit.whole <- lm(mpg ~ ., data = mtcars.fact)
fit.optimal <- step(fit.whole, direction = 'both')
print(fit.optimal$call)
library(datasets)
M <- cor(mtcars)
corrplot.mixed(M, lower = "number", upper = "circle", title = "Correlations between Different Variances")
install.packages("corrplot")
library(datasets)
library(corrplot)
M <- cor(mtcars)
corrplot.mixed(M, lower = "number", upper = "circle", title = "Correlations between Different Variances")
boxplot(mpg ~ am, data = mtcars, names = c("Automatic", "Manual"))
??boxplot()
boxplot(mpg ~ am, data = mtcars, names = c("Automatic", "Manual"))
par(mfrow = c(2,2))
plot(fit.optimal)
boxplot(mpg ~ am, data = mtcars, col = c("Automatic", "Manual"))
boxplot(mpg ~ am, data = mtcars, col=c("steelblue","hotpink"),names = c("Automatic", "Manual"))
boxplot(mpg ~ am, data = mtcars, col=c("steelblue","hotpink"),names = c("Automatic", "Manual"),las=1, font.lab=2)
mtcars
View(mtcars)
View(mtcars)
bartlett.test(mpg ~ am, data = mtcars.fact)$p.value
bartlett.test(mpg ~ am, data = mtcars)$p.value
fit.whole <- lm(mpg ~ ., data = mtcars)
fit.optimal <- step(fit.whole, direction = 'both')
print(fit.optimal$call)
it.hpwt <- lm(mpg ~ hp + wt, data = mtcars)
fit.hpwt.cyl <- lm(mpg ~ hp + wt + cyl, data = mtcars)
fit.hpwt <- lm(mpg ~ hp + wt, data = mtcars)
fit.hpwt.cyl <- lm(mpg ~ hp + wt + cyl, data = mtcars)
par(mfrow = c(2,2))
plot(fit.optimal)
??corrplot.mixed
# MT is Better than AT for Fuel Efficiency
### By Marco Xu
## Exclusive Summary and Synopsis
This report tries to answer these two questions.
“Is an automatic or manual transmission better for MPG” &
“Quantify the MPG difference between automatic and manual transmissions”
## Part1 "Is an automatic or manual transmission better for MPG”
We may take a glimpse of the mtcars data. First use the cor function to get the correlations between mpg and each of other variables. Also we will draw a plot Figure 1 of correlations between different variables with "corrplot.mixed".
```{r,results='hide'}
library(datasets)
library(corrplot)
```
Second we will draw the box plot Figure 2 of the mpg variable against the influence by factor am with "boxplot"
## Part2 Quantify the MPG difference between automatic and manual transmissions
First, we try to find some relations
```{r}
bartlett.test(mpg ~ am, data = mtcars)$p.value
fit.whole <- lm(mpg ~ ., data = mtcars)
fit.optimal <- step(fit.whole, direction = 'both')
summary(fit.optimal)
```
Then we plot then with "plot"
## Appendix
#### Part1 Figure1
```{r}
M <- cor(mtcars)
corrplot.mixed(M, lower = "number", upper = "circle", title= "Correlations between Different Variances")
```
#### Part1 Figure2
```{r}
boxplot(mpg ~ am, data = mtcars, col=c("steelblue","hotpink"),names = c("Automatic", "Manual"),las=1, font.lab=2)
```
#### Part2 Figure
```{r}
par(mfrow = c(2,2))
plot(fit.optimal)
```
summary(mtcars)
require(dplyr)
require(caret)
require(randomForest)
set.seed(3434)
set.seed(3434)
setwd("H:\\许晟\\Rprogramming\\Github\\Practical-Machine-Learning-Project")
if (!file.exists("pml-training.csv")){
setInternet2(use = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
}
if (!file.exists("pml-testing.csv")){
setInternet2(use = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
}
raw_data <- read.csv("pml-training.csv")
test_data <- read.csv("pml-testing.csv")
near_zeros <- nearZeroVar(raw_data[,-160])
raw_data_cleaned <- raw_data[, -near_zeros]
test_data_cleaned <- test_data[, -near_zeros]
has_nas <- colSums(is.na(raw_data_cleaned)) > 0
raw_data_cleaned <- raw_data_cleaned[, !has_nas]
test_data_cleaned <- test_data_cleaned[, !has_nas]
raw_data_cleaned <- raw_data_cleaned[, 7:59]
test_data_cleaned <- test_data_cleaned[, 7:59]
in_train <- createDataPartition(raw_data_cleaned$classe, p = 0.7, list=FALSE)
training <- raw_data_cleaned[in_train, ]
testing <- raw_data_cleaned[-in_train, ]
fit <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method = "cv", number = 4))
fit <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method = "cv", number = 4))
test_pred <- predict(fit, newdata=testing)
confusionMatrix(test_pred, testing$classe)
real_preds <- predict(fit, newdata=test_data_cleaned)
# function for writing the output files
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
# write the predictons generated in the previsou step into files.
pml_write_files(real_preds)
